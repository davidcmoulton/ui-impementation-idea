@use 'sass:map';
@use 'settings';

@function getMenuConfig($state) {
  $config: ();
  @if $state == 'show' {
    $config: (
      'margin-left': 0,
      'flyoutTranslateX': 0,
      'menu-link-display': unset,
    )
  } @else if $state == 'hide' {
    $config: (
      'margin-left': settings.$flyout-menu-offscreen-offset,
      'flyoutTranslateX': settings.$flyout-menu-offscreen-offset,
      'menu-link-display': none,
    )
  }
  @return $config;
}

@mixin flip-menu($state) {
  margin-left: map.get(getMenuConfig($state), 'margin-left');

  .fly-out-menu {
    transform: map.get(getMenuConfig($state), 'flyoutTranslateX');

    a {
      display:  map.get(getMenuConfig($state), 'menu-link-display');
    }
  }
}

@mixin hide-menu() {
  @include flip-menu(hide);
}

@mixin show-menu() {
  @include flip-menu(show);
}

@mixin transition($property) {
  transition: $property settings.$transition-duration settings.$timing-function;
}

.page-container {
  @include transition(margin-left);
}

.fly-out-menu {
  @include transition(transform);
}

// The viewport is narrow and the user hasn't interacted with the menu control yet, or the user has dismissed it
.page-container,
.page-container[data-menu-shown="false"] {
  @include hide-menu();
}

// The user has invoked the menu
.page-container[data-menu-shown="true"] {
  @include show-menu();
}

// The viewport is wide and the user hasn't dismissed it
.page-container:not([data-menu-shown="false"]) {
    @media screen and (min-width: settings.$breakpoint) {
      @include show-menu();
  }
}
